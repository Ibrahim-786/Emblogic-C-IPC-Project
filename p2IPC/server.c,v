head	1.7;
access;
symbols;
locks
	vishal:1.7; strict;
comment	@ * @;


1.7
date	2015.03.18.12.32.52;	author vishal;	state Exp;
branches;
next	1.6;

1.6
date	2015.03.18.06.06.24;	author vishal;	state Exp;
branches;
next	1.5;

1.5
date	2015.03.06.05.20.38;	author vishal;	state Exp;
branches;
next	1.4;

1.4
date	2015.03.06.05.18.58;	author vishal;	state Exp;
branches;
next	1.3;

1.3
date	2015.03.05.20.05.34;	author vishal;	state Exp;
branches;
next	1.2;

1.2
date	2015.03.05.20.03.29;	author vishal;	state Exp;
branches;
next	1.1;

1.1
date	2015.03.05.20.00.24;	author vishal;	state Exp;
branches;
next	;


desc
@invoke the three client.
@


1.7
log
@*** empty log message ***
@
text
@#include"header.h"
#define SIZE 6
int main()
{
	pid_t pid;
	int arr[SIZE], arr1[SIZE];
	struct add ad[3];
	invoke_clients(arr);
	read_req(arr, ad);
	invoke_pro(arr1);


	return 0;
}

int invoke_clients(int *arr)
{
	int numcl, i, ret, j;
	char **p, rfd[4], wfd[4];
	p = malloc(sizeof(char) * 30);
	*(p + 0) = "./add_req";
        *(p + 1) = "./sub_req";
        *(p + 2) = "./mul_req";
	i = 0;
	for(j = 0; j < 3; j++)
	{
		printf("%s\n",*(p + j));
		if(pipe((arr + i)) < 0)
		{
			perror("pipe");
			goto OUT;
		}
		printf("%d\n",*(arr + i ));
		printf("%d\n",*(arr + i + 1));
		ret = fork();
		switch(ret)
		{
		case -1:
			perror("fork");
			goto OUT;
		
		case 0:
			sprintf(rfd, "%d", *(arr + i));
			sprintf(wfd, "%d", *(arr + i + 1));
			execl(*(p + j), *(p + j), rfd, wfd, NULL);
			printf("%s : %s\n", __FILE__, __func__);
			break;
		}
		i += 2;

	}
	return 0;
OUT:
	 return -1;
}

read_req(int *arr, struct add *ad)
{
	int i, j, count;
	j = 0;
	
	for(i = 0; i < 3; i++)
	{
		printf("%dddddddddddddddddd\n",arr[j]);
		count = read(arr[j], (ad + i), sizeof(struct add));
		printf("NUMBER of character read:- %d\n",count);
		j += 2;
	}	
	return 0;
}

int invoke_pro(int *arr1)
{
	
	int numcl, i, ret, j;
	char **p, rfd[4], wfd[4];
	p = malloc(sizeof(char) * 30);
	*(p + 0) = "./add_pro";
        *(p + 1) = "./sub_pro";
        *(p + 2) = "./mul_pro";
	i = 0;
	for(j = 0; j < 3; j++)
	{
		printf("%s\n",*(p + j));
		if(pipe((arr1 + i)) < 0)
		{
			perror("pipe");
			goto OUT;
		}
		printf("%d\n",*(arr1 + i ));
		printf("%d\n",*(arr1 + i + 1));
		ret = fork();
		switch(ret)
		{
		case -1:
			perror("fork");
			goto OUT;
		case 0:
			sprintf(rfd, "%d", *(arr1 + i));
			sprintf(wfd, "%d", *(arr1 + i + 1));
			execl(*(p + j), *(p + j), rfd, wfd, NULL);
			printf("%s : %s\n", __FILE__, __func__);
			
		}
		i += 2;

	}
	return 0;
OUT:
	return -1;
}
@


1.6
log
@*** empty log message ***
@
text
@d6 2
a7 1
	int arr[SIZE];
d9 2
a10 1

d16 1
a16 1
invoke_clients(int *arr)
d43 2
a44 2
			sprintf(rfd, "%d", (arr + i));
			sprintf(wfd, "%d", (arr + i + 1));
d55 56
@


1.5
log
@*** empty log message ***
@
text
@d52 1
a52 1
	return -1;
@


1.4
log
@*** empty log message ***
@
text
@d31 2
@


1.3
log
@*** empty log message ***
@
text
@d25 1
@


1.2
log
@*** empty log message ***
@
text
@d17 1
a17 1
	char **p, rfd, wfd;
d30 1
a30 1
		ret = fork;
d48 1
a48 1
OUT;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#define SIZE 6;
d7 1
a7 1
	invoke_cl(arr);
d14 1
a14 1
invoke_cl(int *arr)
d16 1
a16 1
	int numcl, i, ret;
d37 1
a37 1
		case 0;
@
